filter {
    if [fields][log_type] == "nginx_error" {
        grok {
            patterns_dir => ["/etc/logstash/patterns"]
            match => {"message" => "%{NGINXDATE:date_time} %{NGINXALERT} %{NGINXID} %{GREEDYDATA:MESSAGE}"}
        }

        if "a client request body is buffered to a temporary file" in [MESSAGE] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match => {"MESSAGE" => "%{SKIPTEXT} client: %{IPORHOST:client}. server: %{HOSTPORT3:server}. request: %{QUOTEDSTRING:request}. (?:host: %{QUOTEDSTRING:host_nginx}. referrer: %{QUOTEDSTRING:referrer}|host: %{QUOTEDSTRING:host_nginx})"}
            }
        } else if "an upstream response is buffered to a temporary file" in [MESSAGE] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match => {"MESSAGE" => "%{SKIPTEXT} %{UNIXPATH:file} (?:%{SKIPTEXT} client: %{IPORHOST:client}|client: %{IPORHOST:client}). server: %{HOSTPORT3:server}. request: %{QUOTEDSTRING:request}. upstream: %{QUOTEDSTRING:upstream}. (?:host: %{QUOTEDSTRING:host_nginx}. referrer: %{QUOTEDSTRING:referrer}|host: %{QUOTEDSTRING:host_nginx}|%{GREEDYDATA:error_msg})"}
            }
        } else if "readv() failed (104: Connection reset by peer) while reading upstream" in [MESSAGE] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match => {"MESSAGE" => "%{SKIPTEXT} client: %{IPORHOST:client}. server: %{HOSTPORT3:server}. (?:request: %{QUOTEDSTRING:request}. upstream: %{QUOTEDSTRING:upstream}). (?:host: %{QUOTEDSTRING:host_nginx}. referrer: %{QUOTEDSTRING:referrer}|host: %{QUOTEDSTRING:host_nginx})"}
            }
        } else if "recv() failed (104: Connection reset by peer) while proxying and reading from upstream" in [MESSAGE] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match => {"MESSAGE" => "%{SKIPTEXT} client: %{IPORHOST:client}. server: %{HOSTPORT3:server}. upstream: %{QUOTEDSTRING:upstream}. %{SKIPTEXT} %{NGINX_BYTES}. %{SKIPTEXT} %{NGINX_BYTES}"}
            }
        } else if "upstream sent more data than specified in" in [MESSAGE] and "Content-Length" in [MESSAGE] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match => {"MESSAGE" => "%{SKIPTEXT} client: %{IPORHOST:client}. server: %{HOSTPORT3:server}. request: %{QUOTEDSTRING:request}. upstream: %{QUOTEDSTRING:upstream}. host: %{QUOTEDSTRING:host_nginx}"}
            }
        } else if "upstream timed out (110: Connection timed out) while reading response header from upstream" in [MESSAGE] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match => {"MESSAGE" => "%{SKIPTEXT} client: %{IPORHOST:client}. server: %{HOSTPORT3:server}. request: %{QUOTEDSTRING:request}. upstream: %{QUOTEDSTRING:upstream}. (?:host: %{QUOTEDSTRING:host_nginx} referrer: %{QUOTEDSTRING:referrer}|host: %{QUOTEDSTRING:host_nginx})"}
            }
        } else if "upstream sent too big header while reading response header from upstream" in [MESSAGE] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match => {"MESSAGE" => "%{SKIPTEXT} client: %{IPORHOST:client}. server: %{HOSTPORT3:server}. (?:request: %{QUOTEDSTRING:request}. upstream: %{QUOTEDSTRING:upstream}. (?:host: %{QUOTEDSTRING:host_nginx} referrer: %{QUOTEDSTRING:referrer}|host: %{QUOTEDSTRING:host_nginx})|%{GREEDYDATA:error_msg})"}
            }
        } else if "open()" in [MESSAGE] and "failed (2: No such file or directory)" in [MESSAGE] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match => {"MESSAGE" => "%{SKIPTEXT} %{GREEDYDATA:error_msg}"}
            }
        } else if "failed (2: No such file or directory)" in [MESSAGE] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match => {"MESSAGE" => "%{QUOTEDSTRING:fileq}. client: %{IPORHOST:client}. server: %{HOSTPORT3:server}. request: %{QUOTEDSTRING:request}. host: %{QUOTEDSTRING:host_nginx}"}
            }
        } else if "could not be resolved (110: Operation timed out) while requesting certificate status" in [MESSAGE] {
            grok {
                patterns_dir => ["/etc/logstash/patterns"]
                match => {"MESSAGE" => "%{IPORHOST:host} %{SKIPTEXT} responder: %{IPORHOST:responder}. certificate: %{QUOTEDSTRING:certificate}"}
            }
        } else {
            grok {
                match => {"MESSAGE" => "%{GREEDYDATA:error_msg}"}
            }
        }

        mutate {
            remove_field => [ "MESSAGE" ]
            remove_tag => [ "default" ]
            gsub => [
                "request","\"","",
                "host_nginx","\"","",
                "referrer","\"","",
                "upstream","\"","",
                "fileq","\"","",
                "certificate","\"",""
            ]
        }

        date {
            match => [ "date_time", "YY/MM/dd HH:mm:SS", "YY/MM/d HH:mm:SS" ]
            target => "date_time"
        }
    }
}

output {
    if [fields][log_type] == "nginx_error" {
        elasticsearch {
            hosts => ["https://kibana.domain:9200"]
            user => "logstash_internal"
            password => "PASSWORD"
            cacert => ".../ca/ca.crt"
            ssl_certificate_verification => true
            index => "nginx_error-%{+YYYY.MM.dd}"
        }
    }
}
